generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  password       String
  isAdmin        Boolean?        @default(false)
  purchase       Purchase[]
  quizResult     QuizResult[]
  stripeCustomer StripeCustomer?
  userAnswers    UserAnswer[]
}

model Verification { 
  id String @id @default(uuid()) 
  email String 
  code String 
  expiresAt DateTime 
}

model MockTest {
  id         String       @id @default(uuid())
  title      String
  isFree     Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  difficulty Difficulty?
  quizResult QuizResult[]
  sections   Section[]
  userAswer  UserAnswer[]
  purchases  Purchase[]   @relation("UserPurchases")
}

model Section {
  id         String     @id @default(uuid())
  name       String
  testId     String
  difficulty Boolean?   @default(false)
  completed  Boolean    @default(false)
  breakAfter Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  questions  Question[]
  test       MockTest   @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model Question {
  id            String       @id @default(uuid())
  questionText  String
  sectionId     String
  questionType  QuestionType
  imageSrc      String?
  solutionSrc   String?
  videoSrc      String?
  score          Int @default(0)
  answers       String[]
  correctAnswer String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  section       Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model UserAnswer {
  id             String   @id @default(uuid())
  mockTestId     String
  userId         String
  selectedAnswer Json
  mockTest       MockTest @relation(fields: [mockTestId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuizResult {
  id             String   @id @default(uuid())
  userId         String
  mockTestId     String
  totalQuestions Int
  score          Int
  completed      Boolean? @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  selectedAnswer Json
  mockTest       MockTest @relation(fields: [mockTestId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Purchase {
  id             String     @id @default(uuid())
  userId         String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  planType       String
  expirationDate DateTime
  isActive       Boolean    @default(false)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  mockTests      MockTest[] @relation("UserPurchases")
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Difficulty {
  BASIC
  STANDARD
  PREMIUM
}

enum QuestionType {
  TRUE_FALSE
  DATA_ENTRY
}
